#!/bin/tcsh
# the script .../norm/topic-models/topic-count/do outputs movie_data_....txt

if ( $#argv < 1 ) then
    echo "usage: make-movie [movie-data-file(s)]"
    exit -1
endif

set GNUPLOT = /usr/bin/gnuplot

# currently an unused option
set which_ave = "USE_AVERAGE_FILE=1"

ls frames-tmp

/bin/rm -r frames-tmp > & /dev/null
mkdir frames-tmp
set  frames_directories = ""

foreach file ($argv)
  # assumes file name format "movie_data_cook-100-2.12844.txt"
  # set file = $argv[1]
  set movie_folder = "."
  set x = $file:t:r:r
  set pid = $file:t:r:e
  set name = `echo $x | sed -e 's/movie_data_//' -e 's/-.*//'`
  set samples = `echo $x | awk -F- '{print $2;}'`
  set iterations = `echo $x | awk -F- '{print $3;}'`
  set unique_id = $file:t:r:e
  mkdir frames-tmp/$unique_id
  set frames_directories = ($frames_directories frame-tmp/$unique_id)
  
  set title = $name
  
  set datafile = "x.dat.$$"
  sort -g -t, -k1,1 -k2,2 $file | awk -v $which_ave -F, -f graph-it.awk  > ! $datafile
  set topics = `grep -v '^#' $file | awk '{print $4}' | sort -u -g`
  # assumes file's order is numerically sorted order ....
  set last_frame = `tail -1 $file | awk '{print $1}'`
  set frame = 1

  while ($frame <= $last_frame)
    set frame_name = `echo $frame | awk '{printf("%0.4d", $1);}'`
    # set title = `echo $name $frame | awk '{printf("%s %0.4d", $1, $2);}'`
    set title = "Frame $frame_name for $name"
    grep "^ *$frame " $file | awk -f extract_frame.awk >! $datafile 
    echo -n "$frame "
    $GNUPLOT  << PLOT
    set title "$title"
    set title  offset character 0, 0, 0 font "" norotate
    set terminal png  size 640, 480
    set output "frames-tmp/$unique_id/frame-$frame_name.png"
    set key title "neighbors"
    set xlabel "topics"
    set xlabel  offset character 0, 0, 0 font "" textcolor lt -1 norotate
    set ylabel "Score"
    set ylabel  offset character 0, 0, 0 font "" textcolor lt -1 rotate by -270
    
    plot "$datafile" using 1:2 title '5' with lines , "$datafile" using 1:3 title '10' with lines,   \
         "$datafile" using 1:4 title '25' with lines,  "$datafile" using 1:5 title '50' with lines
PLOT
    
    @ frame ++
  end
end

/bin/rm $datafile 
echo " "

if ( $#argv == 1 ) then
  mencoder -mc 0 -noskip -skiplimit 0 -ovc lavc -lavcopts vcodec=mpeg4:vhq:trell:mbd=2:vmax_b_frames=1:v4mv:vb_strategy=0:vlelim=0:vcelim=0:cmp=6:subcmp=6:precmp=6:predia=3:dia=3:vme=4:vqscale=1 "mf://frames-tmp/$unique_id/*.png" -mf type=png:fps=4 -o movie_"$name"_"$iterations".$pid.avi

  # Notes: '-delay 20' means 20 hundreds of a second delay between each 
  # frame.  The '-loop 0' flag lets it loop indefinitely. To loop only 
  # 3 times use '-loop 3' etc. 

else

  echo $frames_directories
  set frame = 1

  # assume all have same last frame
  while ($frame <= $last_frame)
    set frame_name = `echo $frame | awk '{printf("%0.4d", $1);}'`

    set frame_file = "frames-tmp/frame-$frame_name.png"
echo $frame_file

    set y = 5
    set frame_width = 1000  
    set frame_width = 640  
    @ frame_width_w_boarder = `echo $frame_width + '10 * ' $#argv | bc`
    set image_width = `echo $frame_width / $#argv | bc`
    set image_height = `echo $image_width '* 3 / 4' | bc`    # 640x480 -> 4:3
    @ frame_height = $image_height + 20     

# echo "image_width = " $image_width
# echo "image_height = " $image_height
# echo "frame_width = " $frame_width
    convert -depth 8 -colors 256 -type palette -size $frame_width_w_boarder"x"$frame_height xc:skyblue $frame_file
    foreach f ( frames-tmp/*/frame-$frame_name.png )
      set geometry = "-geometry ""$image_width"x"$image_height"+$y+10 
      composite -depth 8 -colors 256 -type palette $geometry $f $frame_file $frame_file
      @ y = $y + $image_width
      @ y = $y + 10
    end

    # xv $frame_file

ls -l $frame_file
convert -depth 8 -colors 256 -type palette $frame_file t.gif
convert -depth 8 -colors 256 -type palette t.gif $frame_file 
ls -l $frame_file

    @ frame ++
  end


  mencoder -mc 0 -noskip -skiplimit 0 -ovc lavc -lavcopts vcodec=mpeg4:vhq:trell:mbd=2:vmax_b_frames=1:v4mv:vb_strategy=0:vlelim=0:vcelim=0:cmp=6:subcmp=6:precmp=6:predia=3:dia=3:vme=4:vqscale=1 "mf://frames-tmp/*.png" -mf type=png:fps=4 -o movie_"$name-$samples-$iterations".$pid.avi
endif

if ( $#argv > 1 ) echo "Alas ImageQuick's output makes mencoder unhappy :( "

/bin/rm -r frames-tmp > & /dev/null

exit 0


plot "y" using 1:2 title '5' with lines, "y" using 1:3 title '10' with lines, "y" using 1:4 title '25' with lines, "y" using 1:5 title '50' with lines
set terminal x11
     set size 1,1

  # echo "play with http://www.imagemagick.org/Usage/layers/#compositon"
  # composite -geometry 320x240+5+10 pics-cook-40.24239/cook-topic-0.png composite.gif composite.gif
  # composite -geometry 320x240+340+10 pics-cook-40.29612/cook-topic-0.png composite.gif composite.gif
  # composite -geometry 320x240+670+10 pics-cook-40.7266/cook-topic-0.png composite.gif composite.gif
